/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// BaseMailThread1 : The mail thread object



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseMailThread1 {
    /// ID of the mail thread
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The connection account ID
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// ID of the user whom mail message will be assigned to
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The subject
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// A snippet
    #[serde(rename = "snippet", skip_serializing_if = "Option::is_none")]
    pub snippet: Option<String>,
    #[serde(rename = "read_flag", skip_serializing_if = "Option::is_none")]
    pub read_flag: Option<ReadFlag>,
    /// Mail tracking status
    #[serde(rename = "mail_tracking_status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mail_tracking_status: Option<Option<String>>,
    #[serde(rename = "has_attachments_flag", skip_serializing_if = "Option::is_none")]
    pub has_attachments_flag: Option<HasAttachmentsFlag>,
    #[serde(rename = "has_inline_attachments_flag", skip_serializing_if = "Option::is_none")]
    pub has_inline_attachments_flag: Option<HasInlineAttachmentsFlag>,
    #[serde(rename = "has_real_attachments_flag", skip_serializing_if = "Option::is_none")]
    pub has_real_attachments_flag: Option<HasRealAttachmentsFlag>,
    #[serde(rename = "deleted_flag", skip_serializing_if = "Option::is_none")]
    pub deleted_flag: Option<DeletedFlag>,
    #[serde(rename = "synced_flag", skip_serializing_if = "Option::is_none")]
    pub synced_flag: Option<SyncedFlag>,
    #[serde(rename = "smart_bcc_flag", skip_serializing_if = "Option::is_none")]
    pub smart_bcc_flag: Option<SmartBccFlag>,
    #[serde(rename = "mail_link_tracking_enabled_flag", skip_serializing_if = "Option::is_none")]
    pub mail_link_tracking_enabled_flag: Option<MailLinkTrackingEnabledFlag>,
    #[serde(rename = "parties", skip_serializing_if = "Option::is_none")]
    pub parties: Option<Box<crate::models::BaseMailThreadAllOfParties>>,
    /// Parties of the drafted mail thread
    #[serde(rename = "drafts_parties", skip_serializing_if = "Option::is_none")]
    pub drafts_parties: Option<Vec<serde_json::Value>>,
    /// Folders in which messages from thread are being stored
    #[serde(rename = "folders", skip_serializing_if = "Option::is_none")]
    pub folders: Option<Vec<String>>,
    /// Version
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f32>,
    /// A snippet from a draft
    #[serde(rename = "snippet_draft", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub snippet_draft: Option<Option<String>>,
    /// A snippet from a message sent
    #[serde(rename = "snippet_sent", skip_serializing_if = "Option::is_none")]
    pub snippet_sent: Option<String>,
    /// An amount of messages
    #[serde(rename = "message_count", skip_serializing_if = "Option::is_none")]
    pub message_count: Option<i32>,
    #[serde(rename = "has_draft_flag", skip_serializing_if = "Option::is_none")]
    pub has_draft_flag: Option<HasDraftFlag>,
    #[serde(rename = "has_sent_flag", skip_serializing_if = "Option::is_none")]
    pub has_sent_flag: Option<HasSentFlag>,
    #[serde(rename = "archived_flag", skip_serializing_if = "Option::is_none")]
    pub archived_flag: Option<ArchivedFlag>,
    #[serde(rename = "shared_flag", skip_serializing_if = "Option::is_none")]
    pub shared_flag: Option<SharedFlag>,
    #[serde(rename = "external_deleted_flag", skip_serializing_if = "Option::is_none")]
    pub external_deleted_flag: Option<ExternalDeletedFlag>,
    #[serde(rename = "first_message_to_me_flag", skip_serializing_if = "Option::is_none")]
    pub first_message_to_me_flag: Option<FirstMessageToMeFlag>,
    /// Last message timestamp
    #[serde(rename = "last_message_timestamp", skip_serializing_if = "Option::is_none")]
    pub last_message_timestamp: Option<String>,
    /// The time when the mail thread has had the first message received or created
    #[serde(rename = "first_message_timestamp", skip_serializing_if = "Option::is_none")]
    pub first_message_timestamp: Option<String>,
    /// The last time when the mail thread has had a message sent
    #[serde(rename = "last_message_sent_timestamp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_message_sent_timestamp: Option<Option<String>>,
    /// The last time when the mail thread has had a message received
    #[serde(rename = "last_message_received_timestamp", skip_serializing_if = "Option::is_none")]
    pub last_message_received_timestamp: Option<String>,
    /// The time when the mail thread was inserted to database
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The time when the mail thread was updated in database received
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// The ID of the deal
    #[serde(rename = "deal_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub deal_id: Option<Option<i32>>,
    /// Status of the deal
    #[serde(rename = "deal_status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub deal_status: Option<Option<String>>,
    /// The ID of the lead
    #[serde(rename = "lead_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lead_id: Option<Option<uuid::Uuid>>,
    #[serde(rename = "all_messages_sent_flag", skip_serializing_if = "Option::is_none")]
    pub all_messages_sent_flag: Option<AllMessagesSentFlag>,
}

impl BaseMailThread1 {
    /// The mail thread object
    pub fn new() -> BaseMailThread1 {
        BaseMailThread1 {
            id: None,
            account_id: None,
            user_id: None,
            subject: None,
            snippet: None,
            read_flag: None,
            mail_tracking_status: None,
            has_attachments_flag: None,
            has_inline_attachments_flag: None,
            has_real_attachments_flag: None,
            deleted_flag: None,
            synced_flag: None,
            smart_bcc_flag: None,
            mail_link_tracking_enabled_flag: None,
            parties: None,
            drafts_parties: None,
            folders: None,
            version: None,
            snippet_draft: None,
            snippet_sent: None,
            message_count: None,
            has_draft_flag: None,
            has_sent_flag: None,
            archived_flag: None,
            shared_flag: None,
            external_deleted_flag: None,
            first_message_to_me_flag: None,
            last_message_timestamp: None,
            first_message_timestamp: None,
            last_message_sent_timestamp: None,
            last_message_received_timestamp: None,
            add_time: None,
            update_time: None,
            deal_id: None,
            deal_status: None,
            lead_id: None,
            all_messages_sent_flag: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReadFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for ReadFlag {
    fn default() -> ReadFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasAttachmentsFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasAttachmentsFlag {
    fn default() -> HasAttachmentsFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasInlineAttachmentsFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasInlineAttachmentsFlag {
    fn default() -> HasInlineAttachmentsFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasRealAttachmentsFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasRealAttachmentsFlag {
    fn default() -> HasRealAttachmentsFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeletedFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for DeletedFlag {
    fn default() -> DeletedFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SyncedFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for SyncedFlag {
    fn default() -> SyncedFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SmartBccFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for SmartBccFlag {
    fn default() -> SmartBccFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MailLinkTrackingEnabledFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for MailLinkTrackingEnabledFlag {
    fn default() -> MailLinkTrackingEnabledFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasDraftFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasDraftFlag {
    fn default() -> HasDraftFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasSentFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasSentFlag {
    fn default() -> HasSentFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ArchivedFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for ArchivedFlag {
    fn default() -> ArchivedFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SharedFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for SharedFlag {
    fn default() -> SharedFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExternalDeletedFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for ExternalDeletedFlag {
    fn default() -> ExternalDeletedFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FirstMessageToMeFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for FirstMessageToMeFlag {
    fn default() -> FirstMessageToMeFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AllMessagesSentFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for AllMessagesSentFlag {
    fn default() -> AllMessagesSentFlag {
        Self::Variant0
    }
}

