/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetNotesResponse200DataInner {
    /// The ID of the note
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Whether the note is active or deleted
    #[serde(rename = "active_flag", skip_serializing_if = "Option::is_none")]
    pub active_flag: Option<bool>,
    /// The creation date and time of the note
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The content of the note in HTML format. Subject to sanitization on the back-end.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "deal", skip_serializing_if = "Option::is_none")]
    pub deal: Option<Box<crate::models::GetNotesResponse200DataInnerDeal>>,
    /// The ID of the lead the note is attached to
    #[serde(rename = "lead_id", skip_serializing_if = "Option::is_none")]
    pub lead_id: Option<uuid::Uuid>,
    /// The ID of the deal the note is attached to
    #[serde(rename = "deal_id", skip_serializing_if = "Option::is_none")]
    pub deal_id: Option<i32>,
    /// The ID of the user who last updated the note
    #[serde(rename = "last_update_user_id", skip_serializing_if = "Option::is_none")]
    pub last_update_user_id: Option<i32>,
    /// The ID of the organization the note is attached to
    #[serde(rename = "org_id", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<i32>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<crate::models::GetNotesResponse200DataInnerOrganization>>,
    #[serde(rename = "person", skip_serializing_if = "Option::is_none")]
    pub person: Option<Box<crate::models::GetNotesResponse200DataInnerPerson>>,
    /// The ID of the person the note is attached to
    #[serde(rename = "person_id", skip_serializing_if = "Option::is_none")]
    pub person_id: Option<i32>,
    /// If true, the results are filtered by note to deal pinning state
    #[serde(rename = "pinned_to_deal_flag", skip_serializing_if = "Option::is_none")]
    pub pinned_to_deal_flag: Option<bool>,
    /// If true, the results are filtered by note to organization pinning state
    #[serde(rename = "pinned_to_organization_flag", skip_serializing_if = "Option::is_none")]
    pub pinned_to_organization_flag: Option<bool>,
    /// If true, the results are filtered by note to person pinning state
    #[serde(rename = "pinned_to_person_flag", skip_serializing_if = "Option::is_none")]
    pub pinned_to_person_flag: Option<bool>,
    /// The last updated date and time of the note
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::GetNotesResponse200DataInnerUser>>,
    /// The ID of the note creator
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
}

impl GetNotesResponse200DataInner {
    pub fn new() -> GetNotesResponse200DataInner {
        GetNotesResponse200DataInner {
            id: None,
            active_flag: None,
            add_time: None,
            content: None,
            deal: None,
            lead_id: None,
            deal_id: None,
            last_update_user_id: None,
            org_id: None,
            organization: None,
            person: None,
            person_id: None,
            pinned_to_deal_flag: None,
            pinned_to_organization_flag: None,
            pinned_to_person_flag: None,
            update_time: None,
            user: None,
            user_id: None,
        }
    }
}


