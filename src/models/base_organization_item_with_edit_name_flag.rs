/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseOrganizationItemWithEditNameFlag {
    /// The ID of the organization
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The ID of the company related to the organization
    #[serde(rename = "company_id", skip_serializing_if = "Option::is_none")]
    pub company_id: Option<i32>,
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<Box<crate::models::Owner>>,
    /// The name of the organization
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Whether the organization is active or not
    #[serde(rename = "active_flag", skip_serializing_if = "Option::is_none")]
    pub active_flag: Option<bool>,
    #[serde(rename = "picture_id", skip_serializing_if = "Option::is_none")]
    pub picture_id: Option<Box<crate::models::BaseOrganizationItemAllOfPictureId>>,
    /// The country code of the organization
    #[serde(rename = "country_code", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    /// The first character of the organization name
    #[serde(rename = "first_char", skip_serializing_if = "Option::is_none")]
    pub first_char: Option<String>,
    /// The creation date and time of the organization
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The last updated date and time of the organization
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// The visibility group ID of who can see the organization
    #[serde(rename = "visible_to", skip_serializing_if = "Option::is_none")]
    pub visible_to: Option<String>,
    /// The label assigned to the organization
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<i32>,
    /// The name of the organization owner
    #[serde(rename = "owner_name", skip_serializing_if = "Option::is_none")]
    pub owner_name: Option<String>,
    /// The BCC email associated with the organization
    #[serde(rename = "cc_email", skip_serializing_if = "Option::is_none")]
    pub cc_email: Option<String>,
    /// The count of email messages related to the organization
    #[serde(rename = "email_messages_count", skip_serializing_if = "Option::is_none")]
    pub email_messages_count: Option<i32>,
    /// The count of persons related to the organization
    #[serde(rename = "people_count", skip_serializing_if = "Option::is_none")]
    pub people_count: Option<i32>,
    /// The count of activities related to the organization
    #[serde(rename = "activities_count", skip_serializing_if = "Option::is_none")]
    pub activities_count: Option<i32>,
    /// The count of done activities related to the organization
    #[serde(rename = "done_activities_count", skip_serializing_if = "Option::is_none")]
    pub done_activities_count: Option<i32>,
    /// The count of undone activities related to the organization
    #[serde(rename = "undone_activities_count", skip_serializing_if = "Option::is_none")]
    pub undone_activities_count: Option<i32>,
    /// The count of files related to the organization
    #[serde(rename = "files_count", skip_serializing_if = "Option::is_none")]
    pub files_count: Option<i32>,
    /// The count of notes related to the organization
    #[serde(rename = "notes_count", skip_serializing_if = "Option::is_none")]
    pub notes_count: Option<i32>,
    /// The count of followers related to the organization
    #[serde(rename = "followers_count", skip_serializing_if = "Option::is_none")]
    pub followers_count: Option<i32>,
    /// The full address of the organization
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The sub-premise of the organization location
    #[serde(rename = "address_subpremise", skip_serializing_if = "Option::is_none")]
    pub address_subpremise: Option<String>,
    /// The street number of the organization location
    #[serde(rename = "address_street_number", skip_serializing_if = "Option::is_none")]
    pub address_street_number: Option<String>,
    /// The route of the organization location
    #[serde(rename = "address_route", skip_serializing_if = "Option::is_none")]
    pub address_route: Option<String>,
    /// The sub-locality of the organization location
    #[serde(rename = "address_sublocality", skip_serializing_if = "Option::is_none")]
    pub address_sublocality: Option<String>,
    /// The locality of the organization location
    #[serde(rename = "address_locality", skip_serializing_if = "Option::is_none")]
    pub address_locality: Option<String>,
    /// The level 1 admin area of the organization location
    #[serde(rename = "address_admin_area_level_1", skip_serializing_if = "Option::is_none")]
    pub address_admin_area_level_1: Option<String>,
    /// The level 2 admin area of the organization location
    #[serde(rename = "address_admin_area_level_2", skip_serializing_if = "Option::is_none")]
    pub address_admin_area_level_2: Option<String>,
    /// The country of the organization location
    #[serde(rename = "address_country", skip_serializing_if = "Option::is_none")]
    pub address_country: Option<String>,
    /// The postal code of the organization location
    #[serde(rename = "address_postal_code", skip_serializing_if = "Option::is_none")]
    pub address_postal_code: Option<String>,
    /// The formatted organization location
    #[serde(rename = "address_formatted_address", skip_serializing_if = "Option::is_none")]
    pub address_formatted_address: Option<String>,
    /// The count of open deals related with the item
    #[serde(rename = "open_deals_count", skip_serializing_if = "Option::is_none")]
    pub open_deals_count: Option<i32>,
    /// The count of related open deals related with the item
    #[serde(rename = "related_open_deals_count", skip_serializing_if = "Option::is_none")]
    pub related_open_deals_count: Option<i32>,
    /// The count of closed deals related with the item
    #[serde(rename = "closed_deals_count", skip_serializing_if = "Option::is_none")]
    pub closed_deals_count: Option<i32>,
    /// The count of related closed deals related with the item
    #[serde(rename = "related_closed_deals_count", skip_serializing_if = "Option::is_none")]
    pub related_closed_deals_count: Option<i32>,
    /// The count of won deals related with the item
    #[serde(rename = "won_deals_count", skip_serializing_if = "Option::is_none")]
    pub won_deals_count: Option<i32>,
    /// The count of related won deals related with the item
    #[serde(rename = "related_won_deals_count", skip_serializing_if = "Option::is_none")]
    pub related_won_deals_count: Option<i32>,
    /// The count of lost deals related with the item
    #[serde(rename = "lost_deals_count", skip_serializing_if = "Option::is_none")]
    pub lost_deals_count: Option<i32>,
    /// The count of related lost deals related with the item
    #[serde(rename = "related_lost_deals_count", skip_serializing_if = "Option::is_none")]
    pub related_lost_deals_count: Option<i32>,
    /// The date of the next activity associated with the deal
    #[serde(rename = "next_activity_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_activity_date: Option<Option<String>>,
    /// The time of the next activity associated with the deal
    #[serde(rename = "next_activity_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_activity_time: Option<Option<String>>,
    /// The ID of the next activity associated with the deal
    #[serde(rename = "next_activity_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_activity_id: Option<Option<i32>>,
    /// The ID of the last activity associated with the deal
    #[serde(rename = "last_activity_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_activity_id: Option<Option<i32>>,
    /// The date of the last activity associated with the deal
    #[serde(rename = "last_activity_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_activity_date: Option<Option<String>>,
    /// If the company ID of the organization and company ID of the request is same or not
    #[serde(rename = "edit_name", skip_serializing_if = "Option::is_none")]
    pub edit_name: Option<bool>,
}

impl BaseOrganizationItemWithEditNameFlag {
    pub fn new() -> BaseOrganizationItemWithEditNameFlag {
        BaseOrganizationItemWithEditNameFlag {
            id: None,
            company_id: None,
            owner_id: None,
            name: None,
            active_flag: None,
            picture_id: None,
            country_code: None,
            first_char: None,
            add_time: None,
            update_time: None,
            visible_to: None,
            label: None,
            owner_name: None,
            cc_email: None,
            email_messages_count: None,
            people_count: None,
            activities_count: None,
            done_activities_count: None,
            undone_activities_count: None,
            files_count: None,
            notes_count: None,
            followers_count: None,
            address: None,
            address_subpremise: None,
            address_street_number: None,
            address_route: None,
            address_sublocality: None,
            address_locality: None,
            address_admin_area_level_1: None,
            address_admin_area_level_2: None,
            address_country: None,
            address_postal_code: None,
            address_formatted_address: None,
            open_deals_count: None,
            related_open_deals_count: None,
            closed_deals_count: None,
            related_closed_deals_count: None,
            won_deals_count: None,
            related_won_deals_count: None,
            lost_deals_count: None,
            related_lost_deals_count: None,
            next_activity_date: None,
            next_activity_time: None,
            next_activity_id: None,
            last_activity_id: None,
            last_activity_date: None,
            edit_name: None,
        }
    }
}


