/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NoteRequest {
    /// The content of the note in HTML format. Subject to sanitization on the back-end.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// The ID of the lead the note will be attached to
    #[serde(rename = "lead_id", skip_serializing_if = "Option::is_none")]
    pub lead_id: Option<uuid::Uuid>,
    /// The ID of the deal the note will be attached to
    #[serde(rename = "deal_id", skip_serializing_if = "Option::is_none")]
    pub deal_id: Option<i32>,
    /// The ID of the person the note will be attached to
    #[serde(rename = "person_id", skip_serializing_if = "Option::is_none")]
    pub person_id: Option<i32>,
    /// The ID of the organization the note will be attached to
    #[serde(rename = "org_id", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<i32>,
    /// The ID of the user who will be marked as the author of the note. Only an admin can change the author.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The optional creation date & time of the note in UTC. Can be set in the past or in the future. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    #[serde(rename = "pinned_to_lead_flag", skip_serializing_if = "Option::is_none")]
    pub pinned_to_lead_flag: Option<PinnedToLeadFlag>,
    #[serde(rename = "pinned_to_deal_flag", skip_serializing_if = "Option::is_none")]
    pub pinned_to_deal_flag: Option<PinnedToDealFlag>,
    #[serde(rename = "pinned_to_organization_flag", skip_serializing_if = "Option::is_none")]
    pub pinned_to_organization_flag: Option<PinnedToOrganizationFlag>,
    #[serde(rename = "pinned_to_person_flag", skip_serializing_if = "Option::is_none")]
    pub pinned_to_person_flag: Option<PinnedToPersonFlag>,
}

impl NoteRequest {
    pub fn new() -> NoteRequest {
        NoteRequest {
            content: None,
            lead_id: None,
            deal_id: None,
            person_id: None,
            org_id: None,
            user_id: None,
            add_time: None,
            pinned_to_lead_flag: None,
            pinned_to_deal_flag: None,
            pinned_to_organization_flag: None,
            pinned_to_person_flag: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PinnedToLeadFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for PinnedToLeadFlag {
    fn default() -> PinnedToLeadFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PinnedToDealFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for PinnedToDealFlag {
    fn default() -> PinnedToDealFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PinnedToOrganizationFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for PinnedToOrganizationFlag {
    fn default() -> PinnedToOrganizationFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PinnedToPersonFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for PinnedToPersonFlag {
    fn default() -> PinnedToPersonFlag {
        Self::Variant0
    }
}

