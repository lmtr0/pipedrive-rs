/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListProductsResponse200AllOfDataInner {
    /// The ID of the deal-product (the ID of the product attached to the deal)
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The ID of the deal
    #[serde(rename = "deal_id", skip_serializing_if = "Option::is_none")]
    pub deal_id: Option<i32>,
    /// The order number of the product
    #[serde(rename = "order_nr", skip_serializing_if = "Option::is_none")]
    pub order_nr: Option<i32>,
    /// The ID of the product
    #[serde(rename = "product_id", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<i32>,
    /// The ID of the product variation
    #[serde(rename = "product_variation_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub product_variation_id: Option<Option<i32>>,
    /// The price value of the product
    #[serde(rename = "item_price", skip_serializing_if = "Option::is_none")]
    pub item_price: Option<i32>,
    /// The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage.
    #[serde(rename = "discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<f32>,
    /// The type of the discount's value.
    #[serde(rename = "discount_type", skip_serializing_if = "Option::is_none")]
    pub discount_type: Option<DiscountType>,
    /// The duration of the product
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// The type of the duration. (For example hourly, daily, etc.)
    #[serde(rename = "duration_unit", skip_serializing_if = "Option::is_none")]
    pub duration_unit: Option<String>,
    /// The sum of all the products attached to the deal
    #[serde(rename = "sum", skip_serializing_if = "Option::is_none")]
    pub sum: Option<f32>,
    /// The currency associated with the deal product
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// Whether the product is enabled or not
    #[serde(rename = "enabled_flag", skip_serializing_if = "Option::is_none")]
    pub enabled_flag: Option<bool>,
    /// The date and time when the product was added to the deal
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The date and time when the deal product was last edited
    #[serde(rename = "last_edit", skip_serializing_if = "Option::is_none")]
    pub last_edit: Option<String>,
    /// The comments of the product
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// Whether the product is active or not
    #[serde(rename = "active_flag", skip_serializing_if = "Option::is_none")]
    pub active_flag: Option<bool>,
    /// The product tax
    #[serde(rename = "tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<f32>,
    /// The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal.
    #[serde(rename = "tax_method", skip_serializing_if = "Option::is_none")]
    pub tax_method: Option<TaxMethod>,
    /// The product name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The formatted sum of the product
    #[serde(rename = "sum_formatted", skip_serializing_if = "Option::is_none")]
    pub sum_formatted: Option<String>,
    /// The formatted quantity of the product
    #[serde(rename = "quantity_formatted", skip_serializing_if = "Option::is_none")]
    pub quantity_formatted: Option<String>,
    /// The quantity of the product
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<i32>,
    #[serde(rename = "product", skip_serializing_if = "Option::is_none")]
    pub product: Option<Box<crate::models::ListProductsResponse200AllOfDataInnerProduct>>,
}

impl ListProductsResponse200AllOfDataInner {
    pub fn new() -> ListProductsResponse200AllOfDataInner {
        ListProductsResponse200AllOfDataInner {
            id: None,
            deal_id: None,
            order_nr: None,
            product_id: None,
            product_variation_id: None,
            item_price: None,
            discount: None,
            discount_type: None,
            duration: None,
            duration_unit: None,
            sum: None,
            currency: None,
            enabled_flag: None,
            add_time: None,
            last_edit: None,
            comments: None,
            active_flag: None,
            tax: None,
            tax_method: None,
            name: None,
            sum_formatted: None,
            quantity_formatted: None,
            quantity: None,
            product: None,
        }
    }
}

/// The type of the discount's value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DiscountType {
    #[serde(rename = "percentage")]
    Percentage,
    #[serde(rename = "amount")]
    Amount,
}

impl Default for DiscountType {
    fn default() -> DiscountType {
        Self::Percentage
    }
}
/// The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxMethod {
    #[serde(rename = "exclusive")]
    Exclusive,
    #[serde(rename = "inclusive")]
    Inclusive,
    #[serde(rename = "none")]
    None,
}

impl Default for TaxMethod {
    fn default() -> TaxMethod {
        Self::Exclusive
    }
}

