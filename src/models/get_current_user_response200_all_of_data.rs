/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCurrentUserResponse200AllOfData {
    /// The user ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The user name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The user default currency
    #[serde(rename = "default_currency", skip_serializing_if = "Option::is_none")]
    pub default_currency: Option<String>,
    /// The user locale
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    /// The user language ID
    #[serde(rename = "lang", skip_serializing_if = "Option::is_none")]
    pub lang: Option<i32>,
    /// The user email
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// The user phone
    #[serde(rename = "phone", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone: Option<Option<String>>,
    /// Boolean that indicates whether the user is activated
    #[serde(rename = "activated", skip_serializing_if = "Option::is_none")]
    pub activated: Option<bool>,
    /// The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS
    #[serde(rename = "last_login", skip_serializing_if = "Option::is_none")]
    pub last_login: Option<String>,
    /// The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS
    #[serde(rename = "modified", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub modified: Option<Option<String>>,
    /// Boolean that indicates whether the user has created a company
    #[serde(rename = "has_created_company", skip_serializing_if = "Option::is_none")]
    pub has_created_company: Option<bool>,
    #[serde(rename = "access", skip_serializing_if = "Option::is_none")]
    pub access: Option<Vec<crate::models::GetRecentsResponse200DataInnerAnyOf11DataAccessInner>>,
    /// Boolean that indicates whether the user is activated
    #[serde(rename = "active_flag", skip_serializing_if = "Option::is_none")]
    pub active_flag: Option<bool>,
    /// The user timezone name
    #[serde(rename = "timezone_name", skip_serializing_if = "Option::is_none")]
    pub timezone_name: Option<String>,
    /// The user timezone offset
    #[serde(rename = "timezone_offset", skip_serializing_if = "Option::is_none")]
    pub timezone_offset: Option<String>,
    /// The ID of the user role
    #[serde(rename = "role_id", skip_serializing_if = "Option::is_none")]
    pub role_id: Option<i32>,
    /// The user icon URL
    #[serde(rename = "icon_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<Option<String>>,
    /// Boolean that indicates if the requested user is the same which is logged in (in this case, always true)
    #[serde(rename = "is_you", skip_serializing_if = "Option::is_none")]
    pub is_you: Option<bool>,
    /// The user company ID
    #[serde(rename = "company_id", skip_serializing_if = "Option::is_none")]
    pub company_id: Option<i32>,
    /// The user company name
    #[serde(rename = "company_name", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    /// The user company domain
    #[serde(rename = "company_domain", skip_serializing_if = "Option::is_none")]
    pub company_domain: Option<String>,
    /// The user company country
    #[serde(rename = "company_country", skip_serializing_if = "Option::is_none")]
    pub company_country: Option<String>,
    /// The user company industry
    #[serde(rename = "company_industry", skip_serializing_if = "Option::is_none")]
    pub company_industry: Option<String>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<Box<crate::models::GetCurrentUserResponse200AllOfDataAllOfLanguage>>,
}

impl GetCurrentUserResponse200AllOfData {
    pub fn new() -> GetCurrentUserResponse200AllOfData {
        GetCurrentUserResponse200AllOfData {
            id: None,
            name: None,
            default_currency: None,
            locale: None,
            lang: None,
            email: None,
            phone: None,
            activated: None,
            last_login: None,
            created: None,
            modified: None,
            has_created_company: None,
            access: None,
            active_flag: None,
            timezone_name: None,
            timezone_offset: None,
            role_id: None,
            icon_url: None,
            is_you: None,
            company_id: None,
            company_name: None,
            company_domain: None,
            company_country: None,
            company_industry: None,
            language: None,
        }
    }
}


