/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateLeadRequest {
    /// The name of the lead
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    /// The ID of the user which will be the owner of the created lead. If not provided, the user making the request will be used.
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<i32>,
    /// The IDs of the lead labels which will be associated with the lead
    #[serde(rename = "label_ids", skip_serializing_if = "Option::is_none")]
    pub label_ids: Option<Vec<uuid::Uuid>>,
    /// The ID of a person which this lead will be linked to. If the person does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both. 
    #[serde(rename = "person_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub person_id: Option<Option<i32>>,
    /// The ID of an organization which this lead will be linked to. If the organization does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both.
    #[serde(rename = "organization_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<Option<i32>>,
    /// A flag indicating whether the lead is archived or not
    #[serde(rename = "is_archived", skip_serializing_if = "Option::is_none")]
    pub is_archived: Option<bool>,
    #[serde(rename = "value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub value: Option<Option<Box<crate::models::UpdateLeadRequestValue>>>,
    /// The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.
    #[serde(rename = "expected_close_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expected_close_date: Option<Option<String>>,
    #[serde(rename = "visible_to", skip_serializing_if = "Option::is_none")]
    pub visible_to: Option<VisibleTo>,
    /// A flag indicating whether the lead was seen by someone in the Pipedrive UI
    #[serde(rename = "was_seen", skip_serializing_if = "Option::is_none")]
    pub was_seen: Option<bool>,
}

impl UpdateLeadRequest {
    pub fn new() -> UpdateLeadRequest {
        UpdateLeadRequest {
            title: None,
            owner_id: None,
            label_ids: None,
            person_id: None,
            organization_id: None,
            is_archived: None,
            value: None,
            expected_close_date: None,
            visible_to: None,
            was_seen: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VisibleTo {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "7")]
    Variant7,
}

impl Default for VisibleTo {
    fn default() -> VisibleTo {
        Self::Variant1
    }
}

