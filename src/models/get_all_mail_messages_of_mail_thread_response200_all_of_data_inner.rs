/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetAllMailMessagesOfMailThreadResponse200AllOfDataInner {
    /// ID of the mail thread
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The connection account ID
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// ID of the user whom mail message will be assigned to
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The subject
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// A snippet
    #[serde(rename = "snippet", skip_serializing_if = "Option::is_none")]
    pub snippet: Option<String>,
    #[serde(rename = "read_flag", skip_serializing_if = "Option::is_none")]
    pub read_flag: Option<ReadFlag>,
    /// Mail tracking status
    #[serde(rename = "mail_tracking_status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mail_tracking_status: Option<Option<String>>,
    #[serde(rename = "has_attachments_flag", skip_serializing_if = "Option::is_none")]
    pub has_attachments_flag: Option<HasAttachmentsFlag>,
    #[serde(rename = "has_inline_attachments_flag", skip_serializing_if = "Option::is_none")]
    pub has_inline_attachments_flag: Option<HasInlineAttachmentsFlag>,
    #[serde(rename = "has_real_attachments_flag", skip_serializing_if = "Option::is_none")]
    pub has_real_attachments_flag: Option<HasRealAttachmentsFlag>,
    #[serde(rename = "deleted_flag", skip_serializing_if = "Option::is_none")]
    pub deleted_flag: Option<DeletedFlag>,
    #[serde(rename = "synced_flag", skip_serializing_if = "Option::is_none")]
    pub synced_flag: Option<SyncedFlag>,
    #[serde(rename = "smart_bcc_flag", skip_serializing_if = "Option::is_none")]
    pub smart_bcc_flag: Option<SmartBccFlag>,
    #[serde(rename = "mail_link_tracking_enabled_flag", skip_serializing_if = "Option::is_none")]
    pub mail_link_tracking_enabled_flag: Option<MailLinkTrackingEnabledFlag>,
    /// Senders of the mail thread
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<Vec<crate::models::BaseMailThreadAllOfPartiesToInner>>,
    /// Recipients of the mail thread
    #[serde(rename = "to", skip_serializing_if = "Option::is_none")]
    pub to: Option<Vec<crate::models::BaseMailThreadAllOfPartiesToInner>>,
    /// Participants of the Cc
    #[serde(rename = "cc", skip_serializing_if = "Option::is_none")]
    pub cc: Option<Vec<crate::models::BaseMailThreadAllOfPartiesToInner>>,
    /// Participants of the Bcc
    #[serde(rename = "bcc", skip_serializing_if = "Option::is_none")]
    pub bcc: Option<Vec<crate::models::BaseMailThreadAllOfPartiesToInner>>,
    /// A link to the mail thread message
    #[serde(rename = "body_url", skip_serializing_if = "Option::is_none")]
    pub body_url: Option<String>,
    /// ID of the mail thread
    #[serde(rename = "mail_thread_id", skip_serializing_if = "Option::is_none")]
    pub mail_thread_id: Option<i32>,
    /// If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.
    #[serde(rename = "draft", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub draft: Option<Option<String>>,
    #[serde(rename = "has_body_flag", skip_serializing_if = "Option::is_none")]
    pub has_body_flag: Option<HasBodyFlag>,
    #[serde(rename = "sent_flag", skip_serializing_if = "Option::is_none")]
    pub sent_flag: Option<SentFlag>,
    #[serde(rename = "sent_from_pipedrive_flag", skip_serializing_if = "Option::is_none")]
    pub sent_from_pipedrive_flag: Option<SentFromPipedriveFlag>,
    /// The time when the mail message was received or created
    #[serde(rename = "message_time", skip_serializing_if = "Option::is_none")]
    pub message_time: Option<String>,
    /// The time when the mail message was inserted to database
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The time when the mail message was updated in database received
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

impl GetAllMailMessagesOfMailThreadResponse200AllOfDataInner {
    pub fn new() -> GetAllMailMessagesOfMailThreadResponse200AllOfDataInner {
        GetAllMailMessagesOfMailThreadResponse200AllOfDataInner {
            id: None,
            account_id: None,
            user_id: None,
            subject: None,
            snippet: None,
            read_flag: None,
            mail_tracking_status: None,
            has_attachments_flag: None,
            has_inline_attachments_flag: None,
            has_real_attachments_flag: None,
            deleted_flag: None,
            synced_flag: None,
            smart_bcc_flag: None,
            mail_link_tracking_enabled_flag: None,
            from: None,
            to: None,
            cc: None,
            bcc: None,
            body_url: None,
            mail_thread_id: None,
            draft: None,
            has_body_flag: None,
            sent_flag: None,
            sent_from_pipedrive_flag: None,
            message_time: None,
            add_time: None,
            update_time: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReadFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for ReadFlag {
    fn default() -> ReadFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasAttachmentsFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasAttachmentsFlag {
    fn default() -> HasAttachmentsFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasInlineAttachmentsFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasInlineAttachmentsFlag {
    fn default() -> HasInlineAttachmentsFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasRealAttachmentsFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasRealAttachmentsFlag {
    fn default() -> HasRealAttachmentsFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeletedFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for DeletedFlag {
    fn default() -> DeletedFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SyncedFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for SyncedFlag {
    fn default() -> SyncedFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SmartBccFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for SmartBccFlag {
    fn default() -> SmartBccFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MailLinkTrackingEnabledFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for MailLinkTrackingEnabledFlag {
    fn default() -> MailLinkTrackingEnabledFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HasBodyFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for HasBodyFlag {
    fn default() -> HasBodyFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SentFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for SentFlag {
    fn default() -> SentFlag {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SentFromPipedriveFlag {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for SentFromPipedriveFlag {
    fn default() -> SentFromPipedriveFlag {
        Self::Variant0
    }
}

