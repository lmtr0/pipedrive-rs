/*
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostFilterResponse200AllOfData {
    /// The ID of the created filter
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The name of the created filter
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The activity flag of the created filter
    #[serde(rename = "active_flag", skip_serializing_if = "Option::is_none")]
    pub active_flag: Option<bool>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// If the created filter is temporary or not
    #[serde(rename = "temporary_flag", skip_serializing_if = "Option::is_none")]
    pub temporary_flag: Option<bool>,
    /// The user ID of the created filter
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The add time of the created filter
    #[serde(rename = "add_time", skip_serializing_if = "Option::is_none")]
    pub add_time: Option<String>,
    /// The update time of the created filter
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// The visibility group ID of the created filter
    #[serde(rename = "visible_to", skip_serializing_if = "Option::is_none")]
    pub visible_to: Option<i32>,
    /// The custom view ID of the created filter
    #[serde(rename = "custom_view_id", skip_serializing_if = "Option::is_none")]
    pub custom_view_id: Option<i32>,
    /// The created filter conditions object
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<serde_json::Value>,
}

impl PostFilterResponse200AllOfData {
    pub fn new() -> PostFilterResponse200AllOfData {
        PostFilterResponse200AllOfData {
            id: None,
            name: None,
            active_flag: None,
            r#type: None,
            temporary_flag: None,
            user_id: None,
            add_time: None,
            update_time: None,
            visible_to: None,
            custom_view_id: None,
            conditions: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "deals")]
    Deals,
    #[serde(rename = "leads")]
    Leads,
    #[serde(rename = "org")]
    Org,
    #[serde(rename = "people")]
    People,
    #[serde(rename = "products")]
    Products,
    #[serde(rename = "activity")]
    Activity,
}

impl Default for Type {
    fn default() -> Type {
        Self::Deals
    }
}

